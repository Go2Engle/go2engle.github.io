[ { "title": "Remove Sensitive Data from GitHub", "url": "/posts/removeSensitiveDataGithub/", "categories": "How-to, GitHub", "tags": "github, git, bfg, security, sensitive-data", "date": "2025-03-10 00:00:00 -0400", "snippet": "In this tutorial we are going to be using nix-shell so we do not have to install any dependencies on our machines. Run the below command to start a nix-shell with the needed tools.nix-shell -p ope...", "content": "In this tutorial we are going to be using nix-shell so we do not have to install any dependencies on our machines. Run the below command to start a nix-shell with the needed tools.nix-shell -p openjdk17-bootstrap git bfg-repo-cleaner Once inside the nix-shell clone the repo with the --mirror command.git clone --mirror https://github.com/org/reponame.git Create a passwords.txt file containing all sensitive data that needs to be removed from the repository.nano passwords.txt Run the command to remove the passwords from git history.bfg --replace-text passwords.txt reponame.git cd into the repo directory and force git to push back to github.cd reponame.gitgit push --force cd back out of the directory and delete the repo folder and passwords.txt file. You will be left with a .bfg-report you can use to see what was changed. This can be deleted as well once done. If any sensitive data was included inside of a PR you will need to open a ticket with github asking them to remove the PR data from there end.More information can be found here: Removing sensitive data from a repository - GitHub Docs" }, { "title": "Kubeconfig merging on Windows with Powershell", "url": "/posts/kubeconfigMerging/", "categories": "How-to, Kubernetes, Powershell", "tags": "kubernetes, k8s, k3s, howto, Powershell", "date": "2024-03-15 00:00:00 -0400", "snippet": "Merging kubeconfig Files in Windows Using PowerShellManaging Kubernetes configurations can be a crucial aspect of working efficiently with Kubernetes clusters. In this guide, we will walk through t...", "content": "Merging kubeconfig Files in Windows Using PowerShellManaging Kubernetes configurations can be a crucial aspect of working efficiently with Kubernetes clusters. In this guide, we will walk through the process of merging a new kubeconfig file into the main kubeconfig file on Windows using PowerShell.Feel free to customize the instructions below to suit your specific environment and preferences. Following these steps will enable you to efficiently manage kubeconfig files on Windows using PowerShell.Happy Kubernetizing! üöÄüîßPrerequisitesBefore proceeding, ensure you have the following: PowerShell installed on your Windows machine. kubectl command-line tool installed and configured. Access to the kubeconfig files you wish to merge.ProcedureReplace &lt;username&gt; and &lt;new-config&gt; with your username and new config file you want to merge.# make a backupcd ~/.kube/cp config config.bak# merge both kube config files$ENV:KUBECONFIG = \"C:\\Users\\&lt;username&gt;\\.kube\\config;C:\\Users\\&lt;username&gt;\\.kube\\&lt;new-config&gt;\"# verify that the variable is set$ENV:KUBECONFIG# output to temp filekubectl config view --flatten &gt; config-merged# verify that config-merged is correctkubectl --kubeconfig=config-merged config get-clusters# delete backuprm config# move merged file to configmv config-merged config# remove (optional)rm config.bakManaging ContextsList All ClustersTo list all clusters configured in your kubeconfig file, use the following command:kubectl config get-clustersDeleting a Cluster by NameTo delete a cluster from your kubeconfig file by its name, execute the following command:Replace &lt;cluster_name&gt; with the name of the cluster you wish to delete.kubectl config delete-cluster &lt;cluster_name&gt;" }, { "title": "Mounting SMB Shares Inside an Unprivileged Proxmox LXC Container for Docker", "url": "/posts/UnprivilegedLXCContainerSMBShare/", "categories": "How-to, Proxmox", "tags": "docker, LXC, container, proxmox, howto, smb, shares", "date": "2023-09-14 00:00:00 -0400", "snippet": "IntroductionIn the world of containerization, Proxmox is a powerful virtualization platform that allows you to create and manage Linux containers (LXC) efficiently. These containers can run various...", "content": "IntroductionIn the world of containerization, Proxmox is a powerful virtualization platform that allows you to create and manage Linux containers (LXC) efficiently. These containers can run various applications, including Docker containers. In this guide, we‚Äôll walk you through the process of mounting SMB shares inside an unprivileged Proxmox LXC container for use with Docker. This can be especially useful when you need to access remote storage resources securely within your containerized applications.PrerequisitesBefore we dive into the steps, ensure that you have already set up an unprivileged LXC container on your Proxmox Virtual Environment (PVE). If you haven‚Äôt done this yet, you can follow our previous guide on setting up an unprivileged LXC container. Once your LXC container is up and running, you can proceed with the following steps.Step 1: Stop the LXC ContainerTo safely configure SMB share access, stop your LXC container. You can do this using the Proxmox web interface or via the command line with the following command:pct stop &lt;container-id&gt;Replace &lt;container-id&gt; with the actual ID or name of your LXC container.Step 2: Create Folders for Mounting SMB ShareOn your Proxmox host, create a directory where you will mount the SMB share. For this example, let‚Äôs create a folder named ‚Äúmedia‚Äù under the ‚Äú/mnt‚Äù directory:mkdir /mnt/mediaYou can choose a different directory path based on your requirements.Step 3: Edit the fstab FileNow, you need to edit the ‚Äú/etc/fstab‚Äù file to configure the automatic mounting of the SMB share. Use your preferred text editor to open the file; for example, you can use Nano:nano /etc/fstabInside the ‚Äúfstab‚Äù file, add the following line, making sure to replace placeholders with your specific information://HOST/SHARE /mnt/media cifs x-systemd.automount,username=USERNAME,password=PASSWORD,uid=101000,gid=101000 0 0 Replace ‚ÄúHOST‚Äù with the hostname or IP address of the SMB server. Replace ‚ÄúSHARE‚Äù with the name of the shared folder or resource you want to access. Replace ‚ÄúUSERNAME‚Äù and ‚ÄúPASSWORD‚Äù with the credentials required to access the SMB share.Your modified ‚Äúfstab‚Äù file should look something like this://192.168.1.100/shared_folder /mnt/media cifs x-systemd.automount,username=myuser,password=mypassword,uid=101000,gid=101000 0 0Save the changes and exit your text editor.Step 4: Reload systemd and Mount the SMB ShareAfter editing the fstab file, you need to reload systemd and mount the SMB share. Run the following commands:systemctl daemon-reloadmount -aStep 5: Start the LXC ContainerWith the SMB share configured and mounted, you can now start your LXC container:pct start &lt;container-id&gt;Replace ‚Äú\" with the actual ID or name of your LXC container.ConclusionYou‚Äôve successfully configured your Proxmox LXC container to mount an SMB share, allowing your containerized applications to access remote storage resources securely. This setup can be particularly beneficial for applications like Docker containers that require access to external data or media files.Source: https://forum.proxmox.com/threads/tutorial-unprivileged-lxcs-mount-cifs-shares.101795/post-555014" }, { "title": "Creating an Unprivileged LXC Container in Proxmox via the UI with KeyCTL Support", "url": "/posts/UnprivilegedLXCContainerDocker/", "categories": "How-to, Proxmox", "tags": "docker, LXC, container, proxmox, howto", "date": "2023-09-14 00:00:00 -0400", "snippet": "IntroductionProxmox Virtual Environment (PVE) is a powerful virtualization platform that allows you to run and manage various virtualization technologies, including Linux Containers (LXC). LXC cont...", "content": "IntroductionProxmox Virtual Environment (PVE) is a powerful virtualization platform that allows you to run and manage various virtualization technologies, including Linux Containers (LXC). LXC containers are lightweight and efficient, making them an excellent choice for isolating applications and services. In this guide, we‚Äôll walk you through the process of creating an unprivileged LXC container in Proxmox using the user-friendly web interface. Additionally, we‚Äôll ensure that KeyCTL support is enabled, which is essential for certain container features.PrerequisitesBefore you begin, make sure you have the following: A Proxmox Virtual Environment (PVE) server set up and accessible. Sufficient resources (CPU, RAM, and storage) available on your PVE server. Administrative access to the Proxmox web interface.Step 1: Access the Proxmox Web InterfaceOpen a web browser and navigate to the Proxmox web interface. Typically, you can access it by entering the server‚Äôs IP address or hostname in your browser‚Äôs address bar, followed by the port number (default is 8006):https://&lt;your-server-ip&gt;:8006/Log in using your administrative credentials.Step 2: Create a New Unprivileged LXC Container In the Proxmox web interface, click on ‚ÄúCreate CT‚Äù on the left sidebar. Fill in the necessary information to configure your LXC container: VM ID: Enter a unique numeric identifier for your container. Hostname: Choose a hostname for your container. Root Password: Set a secure root password for the container. Unprivileged: Ensure that the ‚ÄúUnprivileged‚Äù option is checked. This is essential for creating unprivileged containers. ISO Image: Select an ISO image to install the container‚Äôs operating system. You can upload an ISO to the server if it‚Äôs not already available. Click on the ‚ÄúNext‚Äù button to proceed. Configure the container‚Äôs resources: Adjust CPU and memory as needed. Allocate disk space by specifying the ‚ÄúDisk size (GB).‚Äù Click ‚ÄúNext‚Äù to proceed. Customize additional options and settings for your container as desired, such as network settings, DNS, and more. Review your settings, and when you‚Äôre ready, click ‚ÄúFinish‚Äù to create the container.Step 3: Enable KeyCTL SupportBefore you start the LXC container, we need to enable KeyCTL support to ensure proper functionality of certain container features. Here‚Äôs how to do it: In the Proxmox web interface, click on ‚ÄúDatacenter‚Äù in the left sidebar. Select your Proxmox node from the list on the right. Go to the ‚ÄúOptions‚Äù tab. Under the ‚ÄúFeatures‚Äù section, find the ‚ÄúKeyCTL‚Äù option and ensure it‚Äôs checked. Click on ‚ÄúOK‚Äù to save the changes. Step 4: Start the Unprivileged LXC ContainerNow that KeyCTL support is enabled, you can start your unprivileged LXC container: In the Proxmox web interface, navigate to the ‚ÄúContainer‚Äù section on the left sidebar. Select the container you created in Step 2. Click on the ‚ÄúStart‚Äù button at the top. The container will start, and you can access its console or connect via SSH to begin configuring and using your unprivileged LXC container. ConclusionCreating an unprivileged LXC container in Proxmox via the web interface is a straightforward process that offers many benefits in terms of resource isolation and security. Enabling KeyCTL support ensures that your container functions correctly, enabling advanced features as needed. With your container up and running, you‚Äôre ready to deploy and manage applications within it, taking full advantage of containerization technology." }, { "title": "How to Download and Add New LXC Container Templates in Proxmox GUI", "url": "/posts/DownloadLXCTemplates/", "categories": "How-to, Proxmox", "tags": "proxmox, howto, LXC, templates", "date": "2023-09-14 00:00:00 -0400", "snippet": "Proxmox VE is an open-source server management platform for enterprise virtualization that tightly integrates the KVM hypervisor and Linux Containers (LXC), software-defined storage and networking ...", "content": "Proxmox VE is an open-source server management platform for enterprise virtualization that tightly integrates the KVM hypervisor and Linux Containers (LXC), software-defined storage and networking functionality, on a single platform. In this tutorial, we will discuss how to download and add new LXC container templates in Proxmox GUI.Step 1: Access the Proxmox GUITo access the Proxmox GUI, open your web browser and enter the IP address of your Proxmox server followed by port 8006. For example, https://192.168.1.100:8006/.Step 2: Access the Container TemplatesOnce you have accessed the Proxmox GUI, click on the ‚ÄúDatacenter‚Äù node in the left-hand navigation pane. Then, click on the ‚ÄúStorage‚Äù tab and select the storage where you want to download the LXC container template. Next, click on the ‚ÄúCT Templates‚Äù option and then click the ‚ÄúTemplates‚Äù button.Step 3: Download the LXC Container TemplateIn the ‚ÄúTemplates‚Äù window, you will see a list of available LXC container templates. You can either download a template by clicking the ‚ÄúDownload‚Äù button or upload an already downloaded template by clicking the ‚ÄúUpload‚Äù button. You can also choose the ‚ÄúDownload from URL‚Äù button to download the template from a specific URL.Step 4: Add the LXC Container TemplateAfter downloading the LXC container template, you can add it to the Proxmox server by clicking on the ‚ÄúCreate CT‚Äù button in the left-hand navigation pane. In the ‚ÄúCreate CT‚Äù window, select the downloaded LXC container template from the ‚ÄúTemplate‚Äù drop-down list. Then, enter the required information for the new container, such as the hostname, IP address, and password.ConclusionIn this tutorial, we have discussed how to download and add new LXC container templates in Proxmox GUI. With this knowledge, you can easily download and add new LXC container templates to your Proxmox server and create new containers based on those templates." }, { "title": "Directly Attaching Disks to VMs in Proxmox", "url": "/posts/DirectAttachStorageVM/", "categories": "How-to, Proxmox", "tags": "proxmox, howto, storage", "date": "2023-09-14 00:00:00 -0400", "snippet": "Proxmox Virtual Environment (PVE) is a versatile virtualization platform that provides a wide range of features for managing virtual machines (VMs). One powerful capability is the ability to direct...", "content": "Proxmox Virtual Environment (PVE) is a versatile virtualization platform that provides a wide range of features for managing virtual machines (VMs). One powerful capability is the ability to directly attach physical disks to VMs. This can be particularly useful when you want to provide dedicated storage to a VM, pass through specialized hardware, or create high-performance storage solutions. In this guide, we‚Äôll walk you through the process of directly attaching disks to VMs in Proxmox.PrerequisitesBefore you begin, ensure that you have: A Proxmox Virtual Environment (PVE) server up and running. A physical disk that you want to attach to a VM. Make a note of its serial number or identifier.Step 1: Update Package RepositoriesTo ensure your system is up to date, log in to your Proxmox server and run the following commands:apt updateStep 2: Install ‚Äòlshw‚Äô for Hardware InformationTo gather information about the available disks and their identifiers, you can use the lshw tool. If it‚Äôs not already installed, you can install it by running:apt install lshwStep 3: Identify the Disk to AttachNow, let‚Äôs use lshw to identify the disk that you want to attach to your VM. Run the following command to list information about disks and storage devices:lshw -class disk -class storageThis command will provide detailed information about the disks on your system, including their serial numbers or identifiers. Make note of the serial number or identifier of the disk you want to attach.Step 4: Create a Symlink to the DiskNext, you need to create a symlink to the disk using its serial number or identifier. Replace &lt;serial of disk&gt; with the actual serial number or identifier of your disk:ls -l /dev/disk/by-id | grep &lt;serial of disk&gt;This command will display the symlink associated with your disk. Make a note of the symlink, as you will use it in the next step.Step 5: Attach the Disk to the VMNow that you have the symlink to your disk, you can attach it to the VM. Use the following command, replacing &lt;vm id&gt; with the actual ID or name of your VM, and &lt;ata-**&gt; with the symlink from the previous command:qm set &lt;vm id&gt; -scsi2 /dev/disk/by-id/&lt;ata-**&gt;This command tells Proxmox to attach the specified disk to the VM as a SCSI device. You can use different SCSI controllers (e.g., -scsi0, -scsi1, -scsi2, etc.) for attaching multiple disks to the same VM.ConclusionDirectly attaching disks to VMs in Proxmox provides flexibility and performance advantages, allowing you to tailor your virtualized environments to specific needs. By following these steps, you can seamlessly integrate physical disks into your virtual machines, expanding storage, and maximizing the utility of your Proxmox environment.Keep in mind that attaching disks directly to VMs requires careful consideration of hardware compatibility, performance requirements, and data management. Always ensure that you have adequate backups and follow best practices when dealing with storage in virtualized environments." }, { "title": "Setting up CasaOS in an LXC Container", "url": "/posts/CasaosInLXCContainer/", "categories": "How-to, Proxmox", "tags": "docker, LXC, container, proxmox, howto, casaos", "date": "2023-09-14 00:00:00 -0400", "snippet": "In a previous blog post, we discussed how to create an unprivileged LXC container in Proxmox using the web interface and enabling KeyCTL support. If you haven‚Äôt followed that guide yet, make sure t...", "content": "In a previous blog post, we discussed how to create an unprivileged LXC container in Proxmox using the web interface and enabling KeyCTL support. If you haven‚Äôt followed that guide yet, make sure to check it out here: Creating an Unprivileged LXC Container in Proxmox via the UI with KeyCTL Support.Now, with your unprivileged LXC container ready, let‚Äôs explore how to set up CasaOS, a powerful home server solution, inside the container.PrerequisitesBefore you begin, make sure you have the following: An unprivileged LXC container created in Proxmox following the instructions from the previous blog post. Administrative access to your LXC container. Internet access from within the container (ensure your container is connected to the network).Step 1: Install CurlInside your LXC container, open a terminal and install curl if it‚Äôs not already installed. You can do this by running the following command:apt updateapt install curlStep 2: Install CasaOSOnce curl is installed, you can use it to download and run the CasaOS installation script. Run the following command:curl -fsSL https://get.casaos.io | sudo bashThis command will fetch the CasaOS installation script from the official source and execute it. Follow the prompts and instructions provided by the installer to complete the setup process.Please note that CasaOS may require specific hardware and configuration options. Make sure to consult the CasaOS documentation for any hardware or compatibility considerations.Step 3: Access CasaOSAfter the installation is complete, CasaOS should be up and running inside your LXC container. You can access the CasaOS web interface by opening a web browser and navigating to the IP address or hostname of your LXC container.ConclusionSetting up CasaOS in an LXC container is a convenient way to deploy a home server solution within an isolated environment. By following the steps in this guide and ensuring that your LXC container is properly configured, you can create a powerful and customizable home server using CasaOS. Enjoy exploring the features and capabilities of CasaOS for your home automation and media server needs." }, { "title": "Fixing Microphone Quality with Voicemeeter and Discord using PowerShell", "url": "/posts/voicemeeterAudioFix/", "categories": "How-to, Windows, Powershell", "tags": "windows, powershell, audio, discord, voicemeeter, scripts, automation", "date": "2023-07-21 00:00:00 -0400", "snippet": "IntroductionFor users who run Voicemeeter and Discord simultaneously, experiencing microphone quality issues like choppiness and distortion can be quite common. These problems can negatively impact...", "content": "IntroductionFor users who run Voicemeeter and Discord simultaneously, experiencing microphone quality issues like choppiness and distortion can be quite common. These problems can negatively impact communication, making it essential to find a solution. In this article, we‚Äôll explore a PowerShell script that can potentially improve microphone quality by adjusting the priority of the audiodg.exe process when using Voicemeeter and Discord together.Understanding the IssueThe microphone quality issues stem from how Windows handles audio processing when multiple applications, such as Voicemeeter and Discord, compete for system resources.audiodg.exe is a Windows system process responsible for managing audio processing and effects. Running multiple audio applications concurrently can lead to audio glitches and choppy microphone quality as they contend for resources. By elevating the priority of audiodg.exe to a higher level, we can potentially allocate more resources to audio processing, which may result in improved microphone sound.The Solution - PowerShell ScriptTo streamline the process of setting the priority of audiodg.exe to high, we‚Äôll use a PowerShell script. This script will run automatically at startup, ensuring that the priority adjustment occurs each time the system boots.Creating the PowerShell ScriptBelow is the PowerShell script that needs to be created:# Get the audiodg.exe process$audioProcess = Get-Process -Name \"audiodg\" -ErrorAction SilentlyContinueif ($audioProcess) { try { # Set the process priority to High $audioProcess.PriorityClass = [System.Diagnostics.ProcessPriorityClass]::High Write-Host \"Priority of audiodg.exe set to High.\" } catch { Write-Host \"Failed to set priority for audiodg.exe. Error: $_\" -ForegroundColor Red }} else { Write-Host \"audiodg.exe process not found.\" -ForegroundColor Red}Configuring the Scheduled Task Open Task Scheduler: Press Win + R, type taskschd.msc, and press Enter. In Task Scheduler, click on ‚ÄúCreate Basic Task‚Äù in the right-hand Actions pane. Give your task a name and description, then click ‚ÄúNext.‚Äù Choose ‚ÄúWhen the computer starts‚Äù and click ‚ÄúNext.‚Äù Select ‚ÄúStart a program‚Äù and click ‚ÄúNext.‚Äù Browse and select the PowerShell executable (powershell.exe). The default location is usually C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe. In the ‚ÄúAdd arguments (optional)‚Äù field, enter the full path to your PowerShell script. For example, if your script is in C:\\Scripts\\set_audiodg_priority.ps1, you would enter: -ExecutionPolicy Bypass -File \"C:\\Scripts\\set_audiodg_priority.ps1\" The -ExecutionPolicy Bypass parameter is added to bypass the execution policy and allow the script to run. Click ‚ÄúNext‚Äù and then ‚ÄúFinish‚Äù to create the task.ConclusionBy utilizing the steps outlined in this article, you can set the priority of the audiodg.exe process to high, potentially enhancing microphone quality when using Voicemeeter and Discord together. However, it‚Äôs essential to be cautious when modifying process priorities, as it can have consequences on system performance. Always test the script before automating it at startup and ensure that you have a backup of your system.Remember that audio quality can be influenced by various factors, including hardware, drivers, and network settings. If the microphone quality issues persist, consider exploring other troubleshooting options or seeking assistance from relevant communities and forums.Happy communicating with improved microphone quality!" }, { "title": "Exploring gsudo for Windows, A Powerful Equivalent to sudo on Linux!", "url": "/posts/gsudo/", "categories": "How-to, Windows, sudo", "tags": "windows, sudo, gsudo", "date": "2023-07-12 00:00:00 -0400", "snippet": "IntroductionWhen it comes to managing administrative tasks on Linux systems, the command sudo has long been the go-to solution. However, Windows users have often found themselves missing out on thi...", "content": "IntroductionWhen it comes to managing administrative tasks on Linux systems, the command sudo has long been the go-to solution. However, Windows users have often found themselves missing out on this convenient privilege escalation tool. Fortunately, with the introduction of gsudo for Windows, users can now enjoy similar functionality. In this blog post, we‚Äôll delve into the world of gsudo, comparing it to sudo on Linux and exploring how to create an alias in your PowerShell profile to streamline your workflow.Understanding gsudogsudo is an open-source utility that enables users to run commands with elevated privileges on Windows systems. Similar to sudo on Linux, gsudo provides a way to temporarily elevate permissions, allowing users to perform administrative tasks without the need to log in as an administrator or switch to a separate elevated command prompt.Comparing gsudo to sudoWhile gsudo and sudo serve the same purpose on their respective platforms, there are a few key differences to consider. Syntax and usage: On Linux, the sudo command is used before any other command to elevate privileges. For example, sudo apt update runs the apt update command with administrative rights. Conversely, gsudo on Windows is used as a prefix to the entire command line, such as gsudo npm install -g create-react-app. This difference in syntax is a result of the underlying architecture and design choices of the two operating systems. Elevation mechanism: In Linux, sudo uses the system‚Äôs default authentication mechanism, typically requiring the user‚Äôs password to grant elevated privileges. On Windows, gsudo leverages the User Account Control (UAC) mechanism, which prompts the user with a UAC dialog to confirm the elevation request. This approach aligns with Windows‚Äô security model and ensures that users are aware of and explicitly approve the elevation of privileges. Plugin support: One of the advantages of sudo on Linux is its extensibility through plugins, which allow for fine-grained control over command execution. At present, gsudo does not have a plugin system, limiting its capabilities to basic privilege elevation. However, as an open-source project, gsudo has the potential to evolve and introduce plugin support in the future. Creating a PowerShell Alias for gsudoTo streamline your workflow and eliminate the need to type gsudo every time, you can create an alias for gsudo in your PowerShell profile. Here‚Äôs how: Open PowerShell by searching for ‚ÄúPowerShell‚Äù in the Start Menu. Run the following command to open your PowerShell profile in a text editor: notepad $PROFILE If the profile file does not exist, PowerShell will prompt you to create one. Select ‚ÄúYes‚Äù to proceed. In the profile file, add the following line: Set-Alias -Name sudo -Value gsudo Save the file and close the text editor. Restart PowerShell or run the following command to reload your profile: . $PROFILE With the alias in place, you can now use sudo in your PowerShell session to execute commands with elevated privileges, just like you would with gsudo.Conclusiongsudo brings the power of sudo to the Windows operating system, allowing users to execute commands with elevated privileges conveniently. While there are some differences between gsudo and sudo, their core purpose remains the same: facilitating administrative tasks without the need for a separate administrative login. By creating an alias for gsudo in your PowerShell profile, you can further enhance your productivity and enjoy a more streamlined experience on your Windows machine." }, { "title": "Force Dark Mode in Edge", "url": "/posts/cleanupDocker/", "categories": "How-to, edge", "tags": "edge, windows", "date": "2023-05-31 00:00:00 -0400", "snippet": "Hi everyone, Today I‚Äôm going to show you a cool trick that will make your browsing experience more comfortable and stylish. If you‚Äôre like me, you love dark mode on everything. It‚Äôs easier on the e...", "content": "Hi everyone, Today I‚Äôm going to show you a cool trick that will make your browsing experience more comfortable and stylish. If you‚Äôre like me, you love dark mode on everything. It‚Äôs easier on the eyes, it saves battery life, and it looks awesome. But not all websites support dark mode, and some of them are just too bright and flashy for my taste. That‚Äôs why I‚Äôm going to teach you how to enable dark mode on any website using Microsoft Edge.Microsoft Edge is a great browser that has many features and options to customize your browsing. One of them is an experimental flag that lets you force dark mode on web contents. This means that Edge will automatically invert the colors of any website you visit, making it dark and sleek. You don‚Äôt need to install any extensions or plugins for this, and you can turn it on or off anytime you want.Here‚Äôs how to do it: Open Microsoft Edge and type edge://flags/#enable-force-dark in the address bar and press Enter. You will see a page with a list of experimental features. Find the one that says Force Dark Mode for Web Contents and click on the drop-down menu next to it. You can choose from several options, such as Enabled, Enabled with selective image inversion, Enabled with selective inversion of non-image elements, etc. Each option has a different effect on how images and other elements are displayed in dark mode. You can experiment with them and see which one you like best. After you select an option, click on Restart at the bottom right corner of the page. This will restart Edge and apply your changes. Now you can enjoy dark mode on any website you visit!That‚Äôs it! You have successfully enabled dark mode on all websites using Microsoft Edge. I hope you found this tutorial helpful and fun. If you did, please share it with your friends and leave a comment below. And don‚Äôt forget to subscribe to my blog for more tips and tricks on how to make your life easier and better with technology. Thanks for reading!" }, { "title": "Installing Pop Shell on Fedora 38", "url": "/posts/popShellFedora38/", "categories": "How-to, Linux, Fedora", "tags": "fedora, customize, gnome", "date": "2023-04-25 00:00:00 -0400", "snippet": "If you‚Äôre a Linux user and you‚Äôre looking to improve your desktop environment, Pop Shell is an excellent option. Pop Shell is a tiling window manager extension for GNOME that allows you to quickly ...", "content": "If you‚Äôre a Linux user and you‚Äôre looking to improve your desktop environment, Pop Shell is an excellent option. Pop Shell is a tiling window manager extension for GNOME that allows you to quickly and easily manage your windows.In this article, we‚Äôll go over the steps necessary to install Pop Shell on Fedora 38.Step 1: Install Pop ShellThe first step in installing Pop Shell is to open a terminal and enter the following command:sudo dnf install gnome-shell-extension-pop-shellThis command will install the Pop Shell extension for GNOME.Step 2: Log Out or RebootAfter installing Pop Shell, you‚Äôll need to log out of your current session or reboot your computer in order for the changes to take effect.Step 3: Enable Pop Shell ExtensionsOnce you‚Äôve logged back in, you‚Äôll need to enable the Pop Shell extension in the Extensions application. To do this, follow these steps: Open the Activities overview by pressing the Super key (also known as the Windows key). Search for ‚ÄúExtensions‚Äù and open the Extensions application. Find the Pop Shell extension in the list and toggle the switch to ‚ÄúOn.‚ÄùConclusionThat‚Äôs it! After completing these three steps, you should now have Pop Shell up and running on your Fedora 38 desktop environment. With Pop Shell, you‚Äôll be able to quickly and easily manage your windows, making your computing experience more efficient and enjoyable." }, { "title": "Generate and Copy SSH key to remote host from powershell", "url": "/posts/copySshKeyRemoteHost/", "categories": "How-to, Powershell", "tags": "powershell, terminal", "date": "2023-04-05 00:00:00 -0400", "snippet": "Generating SSH keys in PowerShellTo generate SSH keys in PowerShell, follow these steps: Open PowerShell by clicking the Start button and searching for PowerShell. Type ssh-keygen and p...", "content": "Generating SSH keys in PowerShellTo generate SSH keys in PowerShell, follow these steps: Open PowerShell by clicking the Start button and searching for PowerShell. Type ssh-keygen and press Enter. This will start the process of generating your SSH keys. You‚Äôll be prompted to enter a file name for your keys. The default file name is id_rsa, which is fine for most use cases. Press Enter to accept the default file name. You‚Äôll be prompted to enter a passphrase for your keys. This is optional, but highly recommended for added security. If you don‚Äôt want to use a passphrase, simply press Enter twice. Your keys will be generated and saved to your user profile directory in the .ssh folder. By default, this directory is located at $env:USERPROFILE\\.ssh. You should see two files: id_rsa (your private key) and id_rsa.pub (your public key). Copying SSH keys to a remote Linux hostOnce you‚Äôve generated your SSH keys, you‚Äôll need to copy them to the remote Linux host that you want to connect to. To do this, follow these steps: Open PowerShell and type the following command, replacing with the name or IP address of the remote Linux host: type $env:USERPROFILE\\.ssh\\id_rsa.pub | ssh $env:UserName@&lt;HOST_NAME&gt; \"mkdir .ssh &amp;&amp; touch .ssh/authorized_keys &amp;&amp; cat &gt;&gt; .ssh/authorized_keys\" Press Enter to run the command. You‚Äôll be prompted to enter the password for your user account on the remote Linux host. Once you‚Äôve entered your password, your public key will be copied to the remote host and added to the authorized_keys file in the .ssh directory. This will allow you to authenticate yourself using your private key when you connect to the remote host.That‚Äôs it! You‚Äôve successfully generated SSH keys in PowerShell and copied them to a remote Linux host. Now you can use your private key to authenticate yourself when connecting to the remote host via SSH." }, { "title": "Clean-up docker", "url": "/posts/dockercleanup/", "categories": "How-to, Docker", "tags": "docker, container", "date": "2023-03-29 00:00:00 -0400", "snippet": "IntroductionA problem I have ran into many of times on docker host when trying to prune them is the overlays2 folder still contains large amounts of data. Running the correct prune command when on ...", "content": "IntroductionA problem I have ran into many of times on docker host when trying to prune them is the overlays2 folder still contains large amounts of data. Running the correct prune command when on the latest version of docker seems to do the trick.Steps Updated to the latest version of docker Run the below command. docker system prune -a -f " }, { "title": "Extend the disk size of a Ubuntu VM", "url": "/posts/expandPartition/", "categories": "How-to, Linux", "tags": "ubuntu, vm, customize", "date": "2023-02-03 00:00:00 -0500", "snippet": "IntroductionRunning out of space on your VM and need to increase the storage of your main partition? All you need to do is add more disk capacity in your hypervisor and extend your partition.Depend...", "content": "IntroductionRunning out of space on your VM and need to increase the storage of your main partition? All you need to do is add more disk capacity in your hypervisor and extend your partition.DependenciesParted must be installed to follow the below steps. If you do not have parted you can install with:sudo apt-get install partedSteps Extend your disk to your desired size in your hypervisor. SSH into the VM. Run df -h to check your current space for refrence. Run sudo parted to enter into parted. Type print and hit Enter. If asked to fix type fix and hit Enter. You will see your partitions. In most cases if you have the default partition layout we will be working with partition 2. Type resizepart 2 and hit Enter. When asked for End value look for the Disk /dev/sda value from the print command above and enter in format of 80GB for example. Type q and hit enter. Run sudo resize2fs /dev/sda2. Run df -h to confirm partition expanded." }, { "title": "Remove cluster from rancher that is in updating state", "url": "/posts/rancherRemoveStuckCluster/", "categories": "How-to, Kubernetes", "tags": "kubernetes, k8s, k3s, rancher, howto", "date": "2022-10-28 00:00:00 -0400", "snippet": "Sometimes when deleting a cluster from rancher it will get in an updating state and will hang. You can force remove this by editing the clusters yaml from cluster managment and set the finalizers t...", "content": "Sometimes when deleting a cluster from rancher it will get in an updating state and will hang. You can force remove this by editing the clusters yaml from cluster managment and set the finalizers to []finalizers: []If you need to run this via the cli use either of the 2 commands belowRKE1kubectl edit clusters.rancher.cattle.io/&lt;cluster_name&gt;RKE2kubectl edit clusters.management.cattle.io/&lt;cluster_name&gt;" }, { "title": "Install rancher on k3s cluster", "url": "/posts/rancherOnK3s/", "categories": "How-to, Kubernetes", "tags": "kubernetes, k8s, k3s, rancher, howto", "date": "2022-10-04 00:00:00 -0400", "snippet": "Below are the steps I took too install rancher on k3s cluster. To view up to date information visit offical docs at https://docs.ranchermanager.rancher.io/getting-started/quick-start-guides/deploy-...", "content": "Below are the steps I took too install rancher on k3s cluster. To view up to date information visit offical docs at https://docs.ranchermanager.rancher.io/getting-started/quick-start-guides/deploy-rancher-manager/helm-cli.Run the below commandshelm repo add rancher-latest https://releases.rancher.com/server-charts/latestkubectl create namespace cattle-systemkubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.7.1/cert-manager.crds.yamlhelm repo add jetstack https://charts.jetstack.iohelm repo updateBelow are the commands to install cert-manager and rancher. Be sure to update values in rancher install command before running.helm install cert-manager jetstack/cert-manager \\ --namespace cert-manager \\ --create-namespace \\ --version v1.7.1# Windows Powershellhelm install cert-manager jetstack/cert-manager ` --namespace cert-manager ` --create-namespace ` --version v1.7.1helm install rancher rancher-latest/rancher \\ --namespace cattle-system \\ --set hostname=&lt;IP_OF_LBVS&gt; \\ --set replicas=1 \\ --set bootstrapPassword=&lt;PASSWORD_FOR_RANCHER_ADMIN&gt;# Windows Powershellhelm install rancher rancher-latest/rancher ` --namespace cattle-system ` --set hostname=&lt;IP_OF_LBVS&gt; ` --set replicas=1 ` --set bootstrapPassword=&lt;PASSWORD_FOR_RANCHER_ADMIN&gt;" }, { "title": "Setting up HA K3s cluster", "url": "/posts/haK3sCluster/", "categories": "How-to, Kubernetes", "tags": "kubernetes, k8s, k3s, howto", "date": "2022-10-04 00:00:00 -0400", "snippet": "Below are the steps I took too create a HA local db k3s cluster utilizing a LBVS IP.Have 3 linux nodes ready. In my case Im using 3 ubuntu 20.04 LTS nodes On the first node run: sudo curl -sfL...", "content": "Below are the steps I took too create a HA local db k3s cluster utilizing a LBVS IP.Have 3 linux nodes ready. In my case Im using 3 ubuntu 20.04 LTS nodes On the first node run: sudo curl -sfL https://get.k3s.io | K3S_TOKEN=SECRET sh -s - server --cluster-init --tls-san &lt;LBVS_IP&gt; sudo cat /var/lib/rancher/k3s/server/node-token On the 2nd and 3rd node run: sudo curl -sfL https://get.k3s.io | K3S_TOKEN=&lt;TOKEN&gt; sh -s - server --server https://&lt;1st node IP&gt;:6443 Back on the first node you can run the below to get your kubeconfig file: sudo cat /etc/rancher/k3s/k3s.yaml Before using this kubeconfig file edit the server: address. Change this to your LBVS IP address" }, { "title": "Setting up Powershell profile in Windows Terminal", "url": "/posts/PowershellConfig/", "categories": "How-to, Powershell", "tags": "powershell, customization, terminal", "date": "2022-07-25 00:00:00 -0400", "snippet": "The below steps will walk you through setting up your windows terminal with the latest powershell, oh-my-posh, and psreadline. Install the latest version of powershell from Microsoft Set your win...", "content": "The below steps will walk you through setting up your windows terminal with the latest powershell, oh-my-posh, and psreadline. Install the latest version of powershell from Microsoft Set your windows terminal default powershell to the latest that was just installed. Use winget to install oh-my-posh. winget install JanDeDobbeleer.OhMyPosh -s winget Install fonts using oh-my-posh. oh-my-posh font install After fonts are installed change your windows terminal font defaults to MesloLGM NF. This will allow the themes to render correctly in your terminal. Install PSReadLine powershell module using an elevated powershell session. Install-Module -Name PSReadLine -AllowPrerelease -Scope CurrentUser -Force -SkipPublisherCheck Modify your powershell profile. nodepad $PROFILE If your prfoile does not exist create it with the below. New-Item -Path $PROFILE -Type File -Force $ohmyposhTheme = \"spaceship\" oh-my-posh init pwsh --config \"$env:POSH_THEMES_PATH\\$ohmyposhTheme.omp.json\" | Invoke-Expression Import-Module PSReadLine Set-PSReadLineOption -PredictionSource HistoryAndPlugin Set-PSReadLineOption -PredictionViewStyle ListView Set-PSReadLineOption -EditMode Windows You can view oh-my-posh themes by running Get-PoshThemes.After you find a theme you like change $ohmyposhTheme = \"spaceship\" in your profile and save." }, { "title": "Wireguard VPN client setup", "url": "/posts/wireGuardVPNSetup/", "categories": "How-to, Linux", "tags": "wireguard, vpn, ubuntu", "date": "2022-06-22 00:00:00 -0400", "snippet": "OverviewThis guide will walk you through setting up Wireguard client on Ubuntu along with adding a toggle to your gnome interface. I will assume you already have a wireguard VPN server running else...", "content": "OverviewThis guide will walk you through setting up Wireguard client on Ubuntu along with adding a toggle to your gnome interface. I will assume you already have a wireguard VPN server running elsewhere along with your wireguard client conf file.Installing and running Wireguard Install wireguard. sudo apt install wireguard Create a wg0.conf file in /etc/wireguard and paste your wireguard client conf in this file. CTRL + X to save. sudo nano /etc/wireguard/wg0.conf At this point wireguard is now installed and configured you can start and stop wireguard with either of the below commands.#start via servicesudo systemctl start wg-quick@wg0.service#start via wg toolsudo wg-quick up wg0#stop via servicesudo systemctl stop wg-quick@wg0.service#stop via wg toolsudo wg-quick down wg0Enable and disable Wireguard via gnome shell extension Enable wireguard-indicator extension. LINK Go to the wireguard-indicator settings and modify the name of the first service. Make sure the service is set to wg-quick@wg0.service and click Ok. Delete the second service " }, { "title": "OhMyZSH Shell setup", "url": "/posts/shellSetup/", "categories": "How-to, Linux", "tags": "shell, ubuntu, terminal, customize", "date": "2022-06-20 00:00:00 -0400", "snippet": "Below are all the steps to configure your terminal to look like the screenshot Install ZSH and set as default shell. sudo apt install zsh Install OhMyZSH. sh -c \"$(curl -fsSL https://...", "content": "Below are all the steps to configure your terminal to look like the screenshot Install ZSH and set as default shell. sudo apt install zsh Install OhMyZSH. sh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" Download and install the below fonts. Once installed set your terminal font to MesloLGS NF. Source MesloLGS NF Regular.ttf MesloLGS NF Bold.ttf MesloLGS NF Italic.ttf MesloLGS NF Bold Italic.ttf Install Powerlevel10k theme. git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k Set ZSH_THEME=\"powerlevel10k/powerlevel10k\" in ~/.zshrc. Restart ZSH. exec zsh Type p10k configure if the configuration wizard doesn‚Äôt start automatically. Install zsh-autosuggestions. Source git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions Add the plugin to the list of plugins for Oh My Zsh to load (inside ~/.zshrc): plugins=( # other plugins... zsh-autosuggestions) Create a .zsh file to add customizations to for autosuggestions. nano ~/.oh-my-zsh/custom/zsh-autosuggestions.zsh Add the below in the created file ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=\"fg=#87ff87\"ZSH_AUTOSUGGEST_STRATEGY=(history completion) Restart your terminal." }, { "title": "Touchpad issues after deep sleep on PopOS 22.04", "url": "/posts/touchpadDeepSleepFix/", "categories": "Framework, fixes", "tags": "framework, ubuntu, fixes", "date": "2022-06-20 00:00:00 -0400", "snippet": "I just recently installed PopOS 22.04 and everything was running great! I got deep sleep working correctly, fingerprint reader working, and everything was fine until the laptop awoke from sleep. I ...", "content": "I just recently installed PopOS 22.04 and everything was running great! I got deep sleep working correctly, fingerprint reader working, and everything was fine until the laptop awoke from sleep. I noticed my mouse was way touchier and gestures were no longer working. After a bit of combing through the framework forums I stumbled along this post.TLDR you just need to go into the BRIOS and disable PS/2 emulation." }, { "title": "Restart remote services", "url": "/posts/restartRemoteServices/", "categories": "How-to, Powershell", "tags": "powershell, scripts", "date": "2021-02-12 00:00:00 -0500", "snippet": "Simple script to loop through multiple servers and services and restart the services. Just replace server and service names and run.## define your servers in an array$Servers = \"Server1\",\"Server2\",...", "content": "Simple script to loop through multiple servers and services and restart the services. Just replace server and service names and run.## define your servers in an array$Servers = \"Server1\",\"Server2\",\"Server3\"## define your services in an array$Services = \"Service1\",\"Service1\",\"Service1\"## Loop through server arrayforeach($Server in $Servers){ ## Loop through service array foreach($Service in $Services){ Write-Host \"Restarting service $Service on $Server\" -ForegroundColor Green ## Restart the service on the remote server Invoke-Command -ComputerName $Server -ScriptBlock{ Restart-Service -Name $using:Service } }}" }, { "title": "Outlook new email", "url": "/posts/outlookNewEmail/", "categories": "How-to, Powershell", "tags": "powershell, scripts", "date": "2021-02-11 00:00:00 -0500", "snippet": "The below code allows you to open a new email message via outlook on your local PC.$ol = New-Object -comObject Outlook.Application#Create the new email$mail = $ol.CreateItem(0)#Optional, set the su...", "content": "The below code allows you to open a new email message via outlook on your local PC.$ol = New-Object -comObject Outlook.Application#Create the new email$mail = $ol.CreateItem(0)#Optional, set the subject$mail.Subject = \"&lt;subject&gt;\"#Optional, set the body$mail.Body = \"&lt;body&gt;\"#Get the new email object$inspector = $mail.GetInspector#Bring the message window to the front$inspector.Activate()" }, { "title": "Get GUID of applications installed on a computer", "url": "/posts/GetGUIDofApp/", "categories": "How-to, Powershell", "tags": "powershell, scripts", "date": "2021-02-10 00:00:00 -0500", "snippet": "Open powershell and run the bellow command.get-wmiobject Win32_Product | sort-object -property Name | Format-Table IdentifyingNumber, Name, LocalPackage -AutoSize", "content": "Open powershell and run the bellow command.get-wmiobject Win32_Product | sort-object -property Name | Format-Table IdentifyingNumber, Name, LocalPackage -AutoSize" }, { "title": "Create Secure Password File", "url": "/posts/CreateSecurePasswordFile/", "categories": "How-to, Powershell", "tags": "powershell, scripts", "date": "2021-02-09 00:00:00 -0500", "snippet": "Method 1$MyCredentials=GET-CREDENTIAL -Credential \"USERNAME\" | EXPORT-CLIXML C:\\Temp\\SecureCredentials.xml$MyCredentials=IMPORT-CLIXML C:\\Temp\\SecureCredentials.xmlMethod 2To create the file run th...", "content": "Method 1$MyCredentials=GET-CREDENTIAL -Credential \"USERNAME\" | EXPORT-CLIXML C:\\Temp\\SecureCredentials.xml$MyCredentials=IMPORT-CLIXML C:\\Temp\\SecureCredentials.xmlMethod 2To create the file run the below$credential = Get-Credential$credential.Password | ConvertFrom-SecureString | Set-Content c:scriptsencrypted_password1.txtTo use the file$usename = \"myemail\"$encrypted = Get-Content c:scriptsencrypted_password.txt | ConvertTo-SecureString$credential = New-Object System.Management.Automation.PsCredential($usename, $encrypted)" } ]
